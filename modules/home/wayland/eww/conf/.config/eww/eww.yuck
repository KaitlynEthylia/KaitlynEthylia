(defwindow statusbar
 :monitor 0
 :stacking "fg"
 :exclusive true
 :geometry (geometry
	 :y "1%"
	 :width "99%"
	 :height "24px"
	 :anchor "top center")
 (statusbar))

(defvar secondary-active
 false)

(defwidget statusbar []
 (literal :content "
 (centerbox
  :visible statusbar-visible
  ${music-length != "" && !secondary-active ? "
   (box
    (workspaces)
    (music-left))
   (window-title)
   (box :space-evenly false :halign 'end' :class 'padded'
    (music-right)
	${EWW_BATTERY != "" ? "(battery)" : ""}
	(powermenu)
    (time)
    (secondary-lock))
  " : "
   (box
    (workspaces)
    (brightness-ctl))
   (window-title)
   (box :space-evenly false :halign 'end' :class 'padded'
    (clipboard)
	(bluetooth)
    (wifi)
   	${EWW_BATTERY != "" ? "(battery)" : ""}
    (powermenu)
    (time)
    (secondary-lock))
  "})
 "))
(defpoll statusbar-visible
 :initial "true"
 :interval "1s"
 "if pgrep bemenu > /dev/null; then echo 'false'; else echo 'true'; fi")

(defwidget cmd-slider [?symbol value command max colour]
 (box :space-evenly false
  (label :text symbol :class "symbol")
  (scale
   :min 0 :max max
   :value value
   :round-digits 0
   :timeout "200ms"
   :onchange command)
  (label :text "${value}%" :class colour)))

(defwidget workspaces []
 (eventbox
  :onscroll "~/Scripts/eww/workspaceInfo.zsh change {} ${workspaces-current}"
  :class "workspaces"
  (box
   :space-evenly false
   (for workspace in workspaces
	(eventbox 
	 :onclick "hyprctl dispatch workspace ${workspace.id}"
	 :class "workspace ${workspace.id == workspaces-current ? "current" : ""} ${workspace.windows > 0 ? "occupied" : "empty"}"
	 (label :text '${replace(icons[workspace.id], "null", workspace.id)}'))))))
(deflisten workspaces :initial "[]" "~/Scripts/eww/workspaceInfo.zsh get")
(deflisten workspaces-current :initial "1" "~/Scripts/eww/workspaceInfo.zsh active")
(defvar icons '["", " ", " ", "󰙯 ", " ", " "]')

(defwidget music-left []
 (box
  :space-evenly false
  :class "music"
  :tooltip "${music.player}: ${music.title} - ${music.artist}"
  (eventbox :class "button" :onclick `playerctl previous` "󰒮")
  (label :class "yellow" :text music-position)
  (scale
   :min 0 :max 100
   :value music-progress
   :round-digits 0
   :timeout "500ms"
   :onchange `~/Scripts/eww/musicInfo.zsh {}`)
  (label :class "yellow" :text music-length)
  (eventbox :class "button" :onclick `playerctl next` "󰒭")))
(deflisten music :initial '{"player":"","title":"","artist":""}' `~/Scripts/eww/musicInfo.zsh song`)
(deflisten music-position `~/Scripts/eww/musicInfo.zsh position`)
(deflisten music-progress :initial 0 `~/Scripts/eww/musicInfo.zsh progress`)
(deflisten music-length `~/Scripts/eww/musicInfo.zsh length`)

(defwidget window-title []
 (label
  :text { strlength(windowtitle ?: "") > (music-length != "" ? 33 : 48)
    ? "${substring(windowtitle, 0, music-length != "" ? 30 : 45)}..."
    : windowtitle ?: "" }
  :tooltip windowtitle))
(deflisten windowtitle `~/Scripts/eww/workspaceInfo.zsh window`)

(defwidget music-right []
 (box
  :space-evenly false
  (eventbox :class "button" :onclick `${music-shuffle.command}` {music-shuffle.icon})
  (eventbox :class "button" :onclick `${music-status.command}` {music-status.icon})
  (eventbox :class "button" :onclick `${music-loop.command}` {music-loop.icon})
  (cmd-slider :value {volume.count}
   :command `pactl set-sink-volume @DEFAULT_SINK@ {}%`
   :max 121 :colour {volume.colour})))
(defpoll volume :interval "1s" `~/Scripts/eww/volumeInfo.sh`)
(deflisten music-shuffle `~/Scripts/eww/musicControls.sh shuffle`)
(deflisten music-status `~/Scripts/eww/musicControls.sh status`)
(deflisten music-loop `~/Scripts/eww/musicControls.sh loop`)

(defwidget brightness-ctl []
 (cmd-slider :symbol "󰃠" :value brightness
  :command `brightnessctl set {}%`
  :max 101 :colour "${
   brightness >= 80 ? "green" :
   brightness >= 50 ? "yellow" :
   brightness >= 30 ? "peach" :
   brightness >= 10 ? "maroon" : "red"
  }"))
(defpoll brightness :interval "1s" `brightnessctl -m | awk -F, '{print $4+0}'`)

(defwidget clipboard []
 (label :text clipboard-short :tooltip clipboard :class "clipboard"))
(defpoll clipboard :interval "5s" `~/Scripts/eww/clipboardInfo.zsh all`)
(defpoll clipboard-short :interval "5s" `~/Scripts/eww/clipboardInfo.zsh head`) 

(defwidget wifi []
 (eventbox
  :class "button ${wifi-strength.colour}"
  (label
   :text {wifi-strength.icon}
   :tooltip "Connected To: ${wifi-name}")))
(defpoll wifi-strength :interval "10s" `~/Scripts/eww/wifiInfo.zsh strength`)
(defpoll wifi-name :interval "1m" `~/Scripts/eww/wifiInfo.zsh name`)

(defwidget bluetooth []
 (eventbox
  :class "bluetooth button ${ bluetooth-name != "" ? "green" : "lavendar" }"
  :onclick `wofi-bluetooth.sh &`
  (label
   :text "${bluetooth-name} 󰂯")))
(defpoll bluetooth-name :interval "10s" `bluetoothctl devices Connected | awk '{print $3}'`)

(defwidget time []
 (box 
  :space-evenly false
  :class "time"
  :tooltip {time.long}
  (label :class "yellow" :text {time.hour})
  (label :text ":")
  (label :class "yellow" :text {time.minute})))
(deflisten time "~/Scripts/eww/dateInfo.zsh")

(defwidget powermenu []
 (box :space-evenly false :halign "end"
  (eventbox :class "button maroon" :onclick `shutdown now` "")
  (eventbox :class "button lavendar" :onclick `reboot` "")
  (eventbox :class "button lavendar" :onclick `halt` "󰤄")))

(defwidget battery []
 (box :space-evenly false
  :tooltip {EWW_BATTERY.total_avg}
  (label
   :text "${EWW_BATTERY.BAT1.status == "Charging" ? "󰂄 " :
	 EWW_BATTERY.BAT1.capacity >= 90 ? "󰁹 " :
	 EWW_BATTERY.BAT1.capacity >= 80 ? "󰂂 " :
	 EWW_BATTERY.BAT1.capacity >= 70 ? "󰂁 " :
	 EWW_BATTERY.BAT1.capacity >= 60 ? "󰂀 " :
	 EWW_BATTERY.BAT1.capacity >= 50 ? "󰁿 " :
	 EWW_BATTERY.BAT1.capacity >= 40 ? "󰁾 " :
	 EWW_BATTERY.BAT1.capacity >= 30 ? "󰁽 " :
	 EWW_BATTERY.BAT1.capacity >= 20 ? "󰁼 " :
	 EWW_BATTERY.BAT1.capacity >= 10 ? "󰁻 " : "󰁺 "
   }"
   :class "${
	 EWW_BATTERY.BAT1.capacity >= 80 ? "green" :
	 EWW_BATTERY.BAT1.capacity >= 50 ? "yellow" :
	 EWW_BATTERY.BAT1.capacity >= 30 ? "peach" :
     EWW_BATTERY.BAT1.capacity >= 10 ? "maroon" : "red"
   }")
  (label :text "${EWW_BATTERY.BAT1.capacity}%" :class "yellow")))

(defwidget secondary-lock []
 (eventbox
  :class "button ${secondary-active ? "peach" : "yellow" }"
  :onclick "if [ $(${EWW_CMD} get secondary-active) = 'false' ]; then
	${EWW_CMD} update secondary-active=true; else ${EWW_CMD} update secondary-active=false
  fi" {secondary-active ? "" : ""}))
